'''Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.

 

Example 1:

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Explanation: 
nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.
nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.
nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0'''

class Solution:
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        h={}
        n=len(nums)
        s=set()
        for i,num in enumerate(nums):
            h[num]=i
        for i in range(n):
            for j in range(i+1,n):
                desired=-nums[i]-nums[j]
                if desired in h and h[desired]!=i and h[desired]!=j:
                    s.add(tuple(sorted([nums[i],nums[j],desired])))
        return s
        